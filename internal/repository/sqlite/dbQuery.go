package sqlite

import (
	"cash_piggy_bank/internal/botpkg"
	"cash_piggy_bank/internal/domain"
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	_ "github.com/mattn/go-sqlite3" // –î—Ä–∞–π–≤–µ—Ä SQLite
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
)

var dbOn int

type Goal struct {
	ID      int
	Name    string
	Current float64
	Target  float64
}

// –†–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
func progressBar(percent int) string {
	blocks := 10 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –≤ —à–∫–∞–ª–µ
	if percent >= 100 {
		percent = 100
	}
	filled := int(float64(percent) / 100 * float64(blocks))
	return strings.Repeat("‚ñì", filled) + strings.Repeat("‚ñë", blocks-filled) + fmt.Sprintf(" %d%%", percent)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
func addGoal(bot *telego.Bot, ctx *th.Context, message telego.Message, db *sql.DB, userID int64, goalName string, currentAmount, targetAmount float64) error {
	goals, err := getUserGoals(db, message.Chat.ID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞:", err)
	} else {

		if len(goals) == 10 {
			botpkg.SendText(bot, ctx, message, "<b>ü´∑ –£ —Ç–µ–±—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º —Ü–µ–ª–µ–π</b>\n\n–ë–æ–ª—å—à–µ 10 —Ü–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è.\n–í—ã–ø–æ–ª–Ω–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ —É–¥–∞–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ.", "", 0)
			return errors.New("–º–∞–∫—Å–∏–º—É–º —Ü–µ–ª–µ–π")
		}
	}
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å (–∑–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π)
	stmt, err := db.Prepare("INSERT INTO savings (user_id, goal, amount, target_amount, complete) VALUES (?, ?, ?, ?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	_, err = stmt.Exec(userID, goalName, currentAmount, targetAmount, 0)
	return err
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
func getUserGoals(db *sql.DB, userID int64) ([]Goal, error) {
	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	rows, err := db.Query("SELECT id, goal, amount, target_amount FROM savings WHERE user_id = ?", userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var goals []Goal

	// –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
	for rows.Next() {
		var id int
		var goal string
		var amount, target float64

		// –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
		err = rows.Scan(&id, &goal, &amount, &target)
		if err != nil {
			return nil, err
		}

		goals = append(goals, Goal{
			ID:      id,
			Name:    goal,
			Current: amount,
			Target:  target,
		})
	}

	return goals, nil
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
func updateGoalAmount(db *sql.DB, bot *telego.Bot, ctx *th.Context, message telego.Message, userID int64, goalID int, addAmount float64) error {
	var (
		currentAmount float64
		targetAmount  float64
		goalUserID    int64
		complete      int64
	)

	err := db.QueryRow(`
        SELECT amount, target_amount, user_id, complete
        FROM savings 
        WHERE id = ?`,
		goalID,
	).Scan(&currentAmount, &targetAmount, &goalUserID, &complete)

	if err != nil {
		botpkg.SendText(bot, ctx, message, "<b>‚ùå –¢–∞–∫–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç</b>\n–ù–∞—á–Ω–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏ —É–∫–∞–∂–∏ —Ü–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", "", 0)
		return fmt.Errorf("—Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %v", err)

	}

	// –ï—Å–ª–∏ user_id —Ü–µ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	if goalUserID != userID {
		return fmt.Errorf("—ç—Ç–æ –Ω–µ –≤–∞—à–∞ —Ü–µ–ª—å")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
	_, err = db.Exec(`
        UPDATE savings 
        SET amount = ? 
        WHERE id = ? AND user_id = ?`, // –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
		addAmount, goalID, userID,
	)

	if int((currentAmount+addAmount)/targetAmount*100) >= 100 && complete == 0 {
		botpkg.SendText(bot, ctx, message, "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Ü–µ–ª—å –Ω–∞ 100%</b>\n–¢—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –µ–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å.", "", 0)
		// –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ complete
		_, err = db.Exec(`
        UPDATE savings 
        SET complete = ? 
        WHERE id = ? AND user_id = ?`, // –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
			1, goalID, userID,
		)

	}
	return err
}

// –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å
func deleteGoal(db *sql.DB, userID int64, goalID int) error {
	// –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ü–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	result, err := db.Exec(`
        DELETE FROM savings 
        WHERE id = ? AND user_id = ?`,
		goalID, userID,
	)

	if err != nil {
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		return fmt.Errorf("—Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞—à–∞ —Ü–µ–ª—å")
	}

	return nil
}

func getAllUserId(db *sql.DB) []int64 {
	rows, err := db.Query("SELECT DISTINCT user_id FROM savings")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	var userIDs []int64
	for rows.Next() {
		var userID int64
		if err := rows.Scan(&userID); err != nil {
			log.Fatal(err)
		}
		userIDs = append(userIDs, userID)
	}

	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}

	return userIDs
}

func DbQuery(command string, bot *telego.Bot, ctx *th.Context, message telego.Message, UserMap map[int64]*domain.User) []int64 {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
	execPath, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ –æ—Ç cmd/bot)
	projectDir := filepath.Dir(filepath.Dir(execPath))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
	dbPath := filepath.Join(projectDir, "internal", "repository", "sqlite", "savings.db")
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ë–î (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		panic(err)
	}
	defer db.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err = db.Ping()
	if err != nil {
		panic(err)
	}

	if dbOn == 0 {

		// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		_, err = db.Exec(`
    CREATE TABLE IF NOT EXISTS savings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        goal TEXT NOT NULL,
        amount REAL NOT NULL,
        target_amount REAL NOT NULL,
		complete INTEGER NOT NULL
    );
`)
		if err != nil {
			panic(err)
		}
		dbOn = 1
	}

	if command == "40d9f51c-810c-4023-ae92-c314d90aaf30" {
		return getAllUserId(db)
	}

	if command == "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è ü§ë" {
		UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ë–î"

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
		botpkg.SendKeyboard(bot, ctx, message, nil, "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
	}
	if command == "–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å" || UserMap[message.Chat.ID].Command == "–î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å" {

		if UserMap[message.Chat.ID].Command == "–î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å" {

			arrString := strings.Split(command, " ")
			if len(arrString) != 2 {
				botpkg.SendText(bot, ctx, message, `‚ùå –ß—Ç–æ-—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —Ç–∞–∫. –ù–∞–∑–≤–∞–Ω–∏–µ - 1 —Å–ª–æ–≤–æ, –ø—Ä–æ–±–µ–ª, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ú–∞—à–∏–Ω–∞ 1200000". –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑`, "", 0)
				return nil

			}
			feetFloat, err := strconv.ParseFloat(strings.TrimSpace(arrString[1]), 64)

			if err != nil {
				botpkg.SendText(bot, ctx, message, `‚ùå –ß—Ç–æ-—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —Ç–∞–∫. –ù–∞–∑–≤–∞–Ω–∏–µ - 1 —Å–ª–æ–≤–æ, –ø—Ä–æ–±–µ–ª, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, "–ú–∞—à–∏–Ω–∞ 1200000". –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑`, "", 0)
				return nil

			} else {
				err := addGoal(bot, ctx, message, db, message.Chat.ID, arrString[0], 0.0, feetFloat)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞:", err)
				} else {
					botpkg.SendText(bot, ctx, message, fmt.Sprintf(`<b>–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ—é —Ü–µ–ª—å %s‚úÖ</b>

<b><i>–í –±—É–¥—É—â–µ–º –æ–±–Ω–æ–≤–ª—è–π —Å–≤–æ—é —Ü–µ–ª—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.</i></b>`, arrString[0]), "", 0)
				}
			}

			UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ë–î"

		} else {
			UserMap[message.Chat.ID].Command = "–î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å"
			botpkg.SendText(bot, ctx, message, `–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å—É–º–º—É —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –Ω–∞–∫–æ–ø–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–æ—É—Ç–±—É–∫ 5000"`, "", 0)
		}

	} else if command == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–∏" {
		goals, err := getUserGoals(db, message.Chat.ID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞:", err)
		} else {
			if len(goals) == 0 {
				botpkg.SendText(bot, ctx, message, "–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ü–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å, –∞ –ø–æ—Ç–æ–º —Å–º–æ—Ç—Ä–∏ üëÄ", "", 0)
				return nil
			}
			targetSend := "<b>üéØ –¢–≤–æ–∏ —Ü–µ–ª–∏:</b>\n"
			for _, g := range goals {
				targetSend = targetSend + fmt.Sprintf("‚ñ´Ô∏è%s: %.2f / %.2f‚ÇΩ %v\n", g.Name, g.Current, g.Target, progressBar(int(g.Current/g.Target*100)))
			}
			botpkg.SendText(bot, ctx, message, targetSend, "", 0)
		}
	} else if command == "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º —Å—É–º–º—É –¥–ª—è —Ü–µ–ª–∏" {

		if UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏" {

			UserMap[message.Chat.ID].DbChangeTargetId = UserMap[message.Chat.ID].TargetMap[command]
			botpkg.SendText(bot, ctx, message, fmt.Sprintf(`–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é —Ü–µ–ª—å üí™üèª

<b>–ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∂–µ –Ω–∞–∫–æ–ø–∏–ª –Ω–∞ —Å–≤–æ—é —Ü–µ–ª—å %s.</b>

–ù–∞–ø—Ä–∏–º–µ—Ä, 500`, command), "", 0)

			UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º —Å—É–º–º—É –¥–ª—è —Ü–µ–ª–∏"
		} else if UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º —Å—É–º–º—É –¥–ª—è —Ü–µ–ª–∏" {
			feetFloat, err := strconv.ParseFloat(command, 64)
			if err != nil {
				botpkg.SendText(bot, ctx, message, `‚ùå –Ø –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª. –ü—Ä–∏—à–ª–∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "5000", –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ü–µ–ª–∏`, "", 0)
				return nil
			}
			err = updateGoalAmount(db, bot, ctx, message, message.Chat.ID, UserMap[message.Chat.ID].DbChangeTargetId, feetFloat)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞:", err)
				UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"
				return nil
			}
			botpkg.SendText(bot, ctx, message, "–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üòâ", "", 0)
			UserMap[message.Chat.ID].Command = ""
			botpkg.SendKeyboard(bot, ctx, message, nil, "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
		} else {
			UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"

			goals, err := getUserGoals(db, message.Chat.ID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞:", err)
			} else {
				targetName := make([]string, 0)
				targetSend := "<b>üëá –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å.</b>\n–¢–≤–æ–∏ —Ü–µ–ª–∏:\n"
				for _, g := range goals {
					targetSend = targetSend + fmt.Sprintf("‚ñ´Ô∏è%s: %.2f / %.2f‚ÇΩ\n", g.Name, g.Current, g.Target)
					targetName = append(targetName, g.Name)
					UserMap[message.Chat.ID].TargetMap[g.Name] = g.ID
				}

				if len(targetName) == 0 {
					botpkg.SendText(bot, ctx, message, `–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ü–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å, –∞ –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–π üòâ`, "", 0)
					UserMap[message.Chat.ID].Command = ""
					return nil
				}
				botpkg.SendText(bot, ctx, message, targetSend, "", 0)

				botpkg.SendKeyboard(bot, ctx, message, targetName, "—Ü–µ–ª–∏")
			}

		}
	} else if command == "–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ" {

		if UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ" {

			err = deleteGoal(db, message.Chat.ID, UserMap[message.Chat.ID].TargetMap[command])
			if err != nil {
				botpkg.SendText(bot, ctx, message, "ü§î –ù–µ —Å–º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞", "", 0)
				log.Println("–û—à–∏–±–∫–∞:", err)
				return nil
			}
			botpkg.SendText(bot, ctx, message, "–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ ‚ùé", "", 0)
			UserMap[message.Chat.ID].Command = ""
			botpkg.SendKeyboard(bot, ctx, message, nil, "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")

		} else {

			goals, err := getUserGoals(db, message.Chat.ID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞:", err)
			} else {
				targetName := make([]string, 0)
				targetSend := "<b>üëá –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å‚ùå</b>\n–¢–≤–æ–∏ —Ü–µ–ª–∏:\n"
				for _, g := range goals {
					targetSend = targetSend + fmt.Sprintf("‚ñ´Ô∏è%s: %.2f / %.2f‚ÇΩ\n", g.Name, g.Current, g.Target)
					targetName = append(targetName, g.Name)
					UserMap[message.Chat.ID].TargetMap[g.Name] = g.ID
				}

				if len(targetName) == 0 {
					botpkg.SendText(bot, ctx, message, `–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª —Ü–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å, –∞ –ø–æ—Ç–æ–º —É–¥–∞–ª—è–π üòâ`, "", 0)
					return nil
				}
				UserMap[message.Chat.ID].Command = "–ñ–¥–µ–º ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ"
				botpkg.SendText(bot, ctx, message, targetSend, "", 0)

				botpkg.SendKeyboard(bot, ctx, message, targetName, "—Ü–µ–ª–∏")
			}
		}
	}
	return nil
}
