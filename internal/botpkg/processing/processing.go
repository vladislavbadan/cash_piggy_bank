package processing

import (
	"math/rand"
	"time"

	"cash_piggy_bank/internal/api/exchangepkg"
	"cash_piggy_bank/internal/botpkg"

	"cash_piggy_bank/internal/domain"
	"cash_piggy_bank/internal/repository/sqlite"
	"cash_piggy_bank/internal/service"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

var jobGorotine bool

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Ä—Å, –∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç.
type Rates struct {
	Day   int
	Money string
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥—É—Ä—É–≥–∏–µ —Ñ—É–Ω–∫–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç
func Processing(text string, bot *telego.Bot, ctx *th.Context, message telego.Message, UserMap map[int64]*domain.User, exchange *Rates) {

	if text == "–ò–Ω—Ñ–æ ‚ÑπÔ∏è" {
		botpkg.SendText(bot, ctx, message, `<b>üí∞ –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è—Ö üöÄ</b>

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ª–µ–≥–∫–æ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π!

<b>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- üìå –£–º–Ω—ã–π —É—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π: —Å—Ç–∞–≤—å —Ü–µ–ª–∏ –∏ —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
- üí∏ –ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞: —Å–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∏ –¥–Ω–µ–π –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã - —è –ø–æ—Å—á–∏—Ç–∞—é –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
- üîî –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–µ –¥–∞–º –∑–∞–±—ã—Ç—å –æ—Ç–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏
- üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ù–∞—á–Ω–∏ –∫–æ–ø–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòä`, "", 0)

	} else if text == "–î–æ–∂–∏—Ç—å ü•¥" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º —Å—É–º–º—É" || UserMap[message.Chat.ID].Command == "–°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å" {

		service.Calculation(message.Text, bot, ctx, message, UserMap)
	} else if text == "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è ü§ë" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ë–î" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º —Å—É–º–º—É –¥–ª—è —Ü–µ–ª–∏" || UserMap[message.Chat.ID].Command == "–î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏" || UserMap[message.Chat.ID].Command == "–ñ–¥–µ–º ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ" || text == "–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å" || text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–∏" || text == "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å" || text == "–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å" {
		sqlite.DbQuery(message.Text, bot, ctx, message, UserMap)

	} else if text == "–ö—É—Ä—Å üíµ" {
		_, _, day := time.Now().Date()
		if exchange.Day != day {
			exchange.Day = day
			exchange.Money = exchangepkg.ExchangeRates()
		}
		botpkg.SendText(bot, ctx, message, exchange.Money, "", 0)
	}

	stikers := [11]string{"CAACAgIAAxkBAAELjjFnhBjZruG8kzV7C3JpPMg_LwABUqEAAn0DAAJtsEIDvRMu-bZNulM2BA", "CAACAgIAAxkBAAELjjNnhBjlWVszV46bhgGrd0erbjorpAACVQMAArVx2gYTIpfj7IkJBzYE", "CAACAgIAAxkBAAEOFmln8Et4FUg_hvfN02MMvU27T27V7gACKQADWbv8JWiEdiw7SWZ7NgQ", "CAACAgEAAxkBAAEOKPJn9AIxxp5aa2S0rbWkih5ZxJR6bwACHQEAAjgOghHhhIkhaufuiTYE", "CAACAgIAAxkBAAEOKPRn9AI89vRIMNLzWBvtp3VHbPBvpQACAwEAAladvQoC5dF4h-X6TzYE", "CAACAgIAAxkBAAEOKPZn9AJMhBUD_NV7jgEjSwh8vvo6LwACJgADDbbSGRYpFH5xkFugNgQ", "CAACAgIAAxkBAAEOKPhn9AJUmsdhg8cbMscCVqbOGn1OnAACpQEAAhZCawqkjIJTRgnc1jYE", "CAACAgIAAxkBAAEOKPpn9AJePsS5OFKE05IDLZDVNnBlRgACjAADFkJrCkKO_mIXPU3iNgQ", "CAACAgIAAxkBAAEOKPxn9AJpX38NCysXrpj8ZGHd0Wa96QACBAEAAvcCyA8gD3c76avISTYE", "CAACAgIAAxkBAAEOKP5n9AJyQ49gcrJx7IDf7cMjCrfGvQACXwADwDZPExXCdY-iUFE7NgQ", "CAACAgIAAxkBAAEOKQJn9AJ-_TPoHvDkqqHCgvd6I2PuxwACaAADwDZPE0z9PaPnxGmHNgQ"}

	r := rand.New(rand.NewSource(time.Now().UnixNano()))

	if r.Intn(8) == 1 {
		_, _ = bot.SendSticker(ctx, &telego.SendStickerParams{
			ChatID: tu.ID(message.Chat.ID),
			Sticker: telego.InputFile{
				FileID: stikers[rand.Intn(11)], // –í–∞—à file_id —Å—Ç–∏–∫–µ—Ä–∞
			},
		})
	}

	if !jobGorotine {
		jobGorotine = true
		service.Notification(message.Text, bot, ctx, message)
	}
}
